{
  "src": {
    "app": {
      "api": {
        "auth": {
          "[...nextauth]": {
            "options.ts": "import CredentialsProvider from 'next-auth/providers/credentials';\nimport { cookies } from 'next/headers';\nimport type { NextAuthOptions } from 'next-auth';\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    id?: string;\n    role?: string;\n    token?: string;\n  }\n}\n\ndeclare module \"next-auth\" {\n  interface User {\n    userId: string;\n    role: string;\n    token: string;\n  }\n\n  interface Session {\n    user: {\n      id?: string;\n      role?: string;\n      token?: string;\n    };\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/login`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(credentials),\n        });\n\n        const user = await res.json();\n\n        if (res.ok && user) {\n          return user;\n        } else {\n          throw new Error(user.error || 'Error al iniciar sesión');\n        }\n      },\n    }),\n  ],\n  pages: {\n    signIn: '/login',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n\n  callbacks: {\n    async jwt({ token , user }) {\n      if (user) {\n        token.id = user.userId;\n        token.role = user.role;\n        token.token = user.token;\n      }\n      \n      (await cookies()).set('userId', JSON.stringify(token.id), {\n        path: '/',\n      });\n      (await cookies()).set('token', JSON.stringify(token.token), {\n        path: '/',\n      });\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.role = token.role;\n        session.user.token = token.token;\n      }\n      return session;\n    },\n  },\n};",
            "route.tsx": "import NextAuth from 'next-auth';\nimport { authOptions } from './options'\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };"
          }
        },
        "chat": {
          "route.ts": "import { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '../auth/[...nextauth]/options';\n\nexport async function POST(req: Request) {\n  try {\n    // Usar getServerSession de NextAuth, que sigue funcionando\n    const session = await getServerSession(req, res, { ...authOptions });\n\n    if (!session) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { question } = await req.json(); // Asegúrate de obtener el cuerpo de la solicitud correctamente\n\n    const response = await fetch('http://localhost:3002/api/chatbot/ask', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ question }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return NextResponse.json(\n        { message: errorData.message || 'Error en la respuesta del servidor.' },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    return NextResponse.json({ answer: data.answer }, { status: 200 });\n  } catch (error) {\n    console.error('Error al procesar la solicitud:', error);\n    return NextResponse.json(\n      { message: 'Hubo un error al procesar la solicitud' },\n      { status: 500 }\n    );\n  }\n}\n"
        }
      }
    }
  }
}